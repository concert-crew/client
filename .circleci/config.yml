version: 2.1 # use CircleCI 2.1
orbs:
   ruby: circleci/ruby@1.1.0
   node: circleci/node@5.0.0 # Needed for javascript runtime
  #  heroku: circleci/heroku@1.0.1 # Use the Heroku orb in your config
jobs: # a collection of steps
  build-and-test: # runs not using Workflows must have a `build` job as entry point
    docker:
      - image: cimg/ruby:2.7.4-node
        auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD
      - image: cimg/postgres:14.4
        auth:
            username: mydockerhub-user
            password: $DOCKERHUB_PASSWORD  # context / project UI env-var reference
        environment:
            POSTGRES_USER: server
            POSTGRES_DB: server_test
            POSTGRES_PASSWORD: ""
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: server
      PGPASSWORD: ""
      RAILS_ENV: test

    steps: # a collection of executable commands
      - checkout # special step to check out source code to working directory
      # Which version of bundler?
      - node/install:
          install-yarn: true
          node-version: '16.13'
      - run:
          name: Force Bundler Version
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler
      - run:
          name: Bundle Install
          command: bundle install
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bin/rails db:{create,migrate} --trace
      - run:
          name: Run rspec in parallel
          command: bundle exec rspec
      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs
workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      # - heroku/deploy-via-git: # Use the pre-configured job, deploy-via-git
      #     requires:
      #       - build-and-test
      #     post-steps:
      #       - run:
      #           name: migrate
      #           command: heroku run -a $HEROKU_APP_NAME rails db:migrate
      #     filters:
      #       branches:
      #         only:
      #           - main